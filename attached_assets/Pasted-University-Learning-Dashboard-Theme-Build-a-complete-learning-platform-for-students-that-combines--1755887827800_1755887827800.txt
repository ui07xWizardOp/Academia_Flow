University Learning Dashboard
Theme
Build a complete learning platform for students that combines coding practice, AI-powered
mock interviews, progress tracking, and peer collaboration. Help universities prepare
students for tech careers with one unified system.
Core Challenge: All-in-One Career Prep
Create a platform that:
• Provides structured coding problems with live code execution
• Simulates technical and behavioral interviews using AI
• Tracks student progress with detailed analytics
• Enables real-time peer collaboration and pair programming
• Helps universities monitor and support student readiness
Target Audience
Primary Users: Students, professors, university career services
• Students: Practice coding and interview skills in one place
• Professors: Assign problems and track student development
• Career Services: Monitor student job readiness
• Universities: Support students with data-driven insights
Core Features
1. Smart Coding Environment
• In-browser code editor with syntax highlighting
• Run code safely in isolated Docker containers
• Support for Python, Java, JavaScript, C++
• Store all solutions for later review
2. AI Interview Simulator
• Technical Interviews: Real coding questions with AI guidance
• Behavioral Interviews: AI analyzes communication skills
• Instant Feedback: "Explain your logic more clearly"
• Progress Tracking: Interview readiness score3. Performance Analytics
• Student View: Personal progress charts, weak areas
• Professor Dashboard: Class overview, individual student tracking
• University Insights: Placement readiness across departments
4. Peer Collaboration
• Live Pair Programming: Code together in real-time
• Study Groups: Practice interviews with classmates
• Code Sharing: Get help from peers on difficult problems
Sample Flow
Student Experience:
1. Logs in → Sees 10 new problems assigned by professor
2. Solves "Two Sum" problem → Gets instant feedback and score
3. Takes AI mock interview → Receives improvement suggestions
4. Joins study group → Collaborates on algorithms with classmates
Professor Experience:
1. Assigns weekly problem sets to Data Structures class
2. Reviews class performance → Notices 60% struggle with recursion
3. Schedules extra recursion practice session
4. Tracks student interview readiness before placement season
Tech Requirements
Frontend: React.js with Monaco Editor (VS Code-style coding)
Backend: Node.js with secure Docker containers for code execution
AI: OpenAI GPT for interview questions and feedback
Collaboration: Socket.io for real-time pair programming
Database: PostgreSQL for user data and problem sets
Key Deliverables
1. Demo Video (3-5 minutes)
2. GitHub Code Repository
3. PPT
4. Working Website (if deployed)